#summary Reference documentation for `mingus.extra.fft`.

----

= mingus.extra.fft =



    The fft module can find the frequencies in raw audio data by using fast Fourier
    transformations (supplied by numpy) and can also convert the found frequencies 
    to Note objects.



----

== Attributes ==

=== `x` ===

  * *Type*: int
  * *Value*: 128

----

== Functions ==

=== `_fft(a, n, axis)` ===

  * *Default values*: n = None, axis = -1
  * 
    Compute the one-dimensional discrete Fourier Transform

    This function computes the one-dimensional *n*-point discrete Fourier
    Transform (DFT) with the efficient Fast Fourier Transform (FFT) algorithm. [CT]

    Parameters
    ----------
    a : array_like
        Input array, can be complex
    n : int, optional
        Length of the transformed axis of the output.
        If `n` is smaller than the length of the input, the input is cropped.
        If it is larger, the input is padded with zeros.  If `n` is not given,
        the length of the input (along the axis specified by `axis`) is used.
    axis : int, optional
        Axis over which to compute the FFT.  If not given, the last axis is
        used.

    Returns
    -------
    out : complex ndarray
        The truncated or zero-padded input, transformed along the axis
        indicated by `axis`, or the last one if `axis` is not specified.

    Raises
    ------
    IndexError
        if `axes` is larger than the last axis of `a`

    See Also
    --------
    numpy.fft : for definition of the DFT and conventions used
    ifft : The inverse of `fft`.
    fft2 : The two-dimensional FFT.
    fftn : The *n*-dimensional FFT.
    rfftn : The *n*-dimensional FFT of real input.
    fftfreq : Frequency bins for given FFT parameters.

    Notes
    -----

    FFT (Fast Fourier Transform) refers to a way the discrete Fourier
    Transform (DFT) can be calculated efficiently, by using symmetries in the
    calculated terms.  The symmetry is highest when `n` is a power of 2, and
    the transform is therefore most efficient for these sizes.

    The DFT is defined, with the conventions used in this implementation, in
    the documentation for the `numpy.fft` module.

    References
    ----------
    .. [CT] Cooley, James W., and John W. Tukey, 1965, "An algorithm for the
            machine calculation of complex Fourier series," *Math. Comput.*
            19: 297-301.

    Examples
    --------

    >>> from numpy import arange, pi, exp
    >>> from numpy.fft import fft
    >>> fft(exp(2j*pi*arange(8)/8))
    array([ -3.44505240e-16 +1.14383329e-17j,
             8.00000000e+00 -5.71092652e-15j,
             2.33482938e-16 +1.22460635e-16j,
             1.64863782e-15 +1.77635684e-15j,
             9.95839695e-17 +2.33482938e-16j,
             0.00000000e+00 +1.66837030e-15j,
             1.14383329e-17 +1.22460635e-16j,
             -1.64863782e-15 +1.77635684e-15j])


    >>> from numpy.fft import fft, fftfreq
    >>> import matplotlib.pyplot as plt
    >>> t = np.arange(256)
    >>> sp = fft(np.sin(t))
    >>> freq = fftfreq(t.shape[-1])
    >>> plt.plot(freq, sp.real, freq, sp.imag)
    >>> plt.show()

    In this example, real input has an FFT which is Hermitian, i.e., symmetric
    in the real part and anti-symmetric in the imaginary part, as described in
    the `numpy.fft` documentation.

    

=== `_find_log_index(f)` ===

  * This function looks up the index of the frequency f in the frequency table. Because we are dealing with ranges, this returns the nearest index.

=== `analyze_chunks(data, freq, bits, chunksize)` ===

  * *Default values*: chunksize = 512
  * Cuts the one channel data in chunks and analyzes them separately. Making the chunksize a power of two works fastest.  

=== `data_from_file(file)` ===

  * Returns (first channel data, sample frequency, sample width) from a .wav file

=== `find_Note(data, freq, bits)` ===

  * Gets the frequencies, feeds them to find_notes and the returns the Note with the highest amplitude.

=== `find_frequencies(data, freq, bits)` ===

  * *Default values*: freq = 44100, bits = 16
  * Convert audio data into a frequency-amplitude table using fast fourier transformation. Returns a list of tuples (frequency, amplitude). Data should only contain one channel of audio.

=== `find_melody(file, chunksize)` ===

  * *Default values*: file = '440_480_clean.wav', chunksize = 512
  * Experimental function: cuts the sample into chunks and analyzes each chunk. If two consequent chunks turn out to return the same Note they are grouped together. This function returns a list [(Note, chunks)] where chunks is the number of chunks where that note is the most dominant.

=== `find_notes(freqTable, maxNote)` ===

  * *Default values*: maxNote = 100
  * Converts the (frequencies, amplitude) list to a (Note, amplitude) list.

----

[mingusIndex Back to Index]