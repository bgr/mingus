#summary Reference documentation for `mingus.extra.tablature`.

----

= mingus.extra.tablature =



        The tablature module provides the necessary functions to convert
        mingus.containers to pretty ASCII tablature. 



----

== Attributes ==

=== `default_tuning` ===

  * *Type*: instance
  * *Value*: <mingus.extra.tunings.StringTuning instance at 0x2465830>

----

== Functions ==

=== `_get_qsize(tuning, width)` ===

  * Helper function that returns a reasonable quarter note size for `tuning` and `width`.

=== `_get_width(maxwidth)` ===

  * Helper function that returns the width of a single bar, when width of the page is given.

=== `add_headers(width, title, subtitle, author, email, description, tunings)` ===

  * *Default values*: width = 80, title = 'Untitled', subtitle = '', author = '', email = '', description = '', tunings = []
  * Creates a nice header in the form of a list of strings using the information that has been filled in. All arguments except `width` and `tunings` should be strings. `width` should be an integer and `tunings` a list of tunings representing the instruments.

=== `begin_track(tuning, padding)` ===

  * *Default values*: padding = 2
  * Helper function that builds the first few characters of every bar.

=== `from_Bar(bar, width, tuning, collapse)` ===

  * *Default values*: width = 40, tuning = None, collapse = True
  * Converts a mingus.containers.Bar object to ASCII tablature. `tuning` should be a StringTuning object or None for the default tuning. If `collapse` is False this will return a list of lines, if it's True all lines will be concatenated with a newline symbol. Throws a !FingerError if no playable fingering can be found. Use `string` and `fret` attributes on Notes to force certain fingerings.

=== `from_Composition(composition, width, description)` ===

  * *Default values*: width = 80, description = ''
  * Converts a mingus.containers.Composition to an ASCII tablature string, and automatically adds an header based on the title, subtitle, author and e-mail attributes. An extra description of the piece can also be given. Tunings can be set by using the `Track.instrument.tuning` or `Track.tuning` attribute. 

=== `from_Note(note, width, tuning)` ===

  * *Default values*: width = 80, tuning = None
  * Returns a string made out of ascii tablature representing a Note object or note string. `tuning` should be a StringTuning object or None for the default tuning. Throws a !RangeError if a suitable fret can't be found. To force a certain fingering you can use a `string` and `fret` attribute on the Note. If the fingering is valid, it will get used instead of the default one.

=== `from_NoteContainer(notes, width, tuning)` ===

  * *Default values*: width = 80, tuning = None
  * Returns a string made out of ASCII tablature representing a NoteContainer object or list of note strings / Note objects. `tuning` should be a StringTuning object or None for the default tuning. Throws a !FingerError if no playable fingering can be found. To force a certain fingering you can use a `string` and `fret` attribute on one or more of the Notes. If the fingering is valid, it will get used instead of the default one.

=== `from_Suite(suite, maxwidth, description)` ===

  * *Default values*: maxwidth = 80, description = ''
  * Converts a mingus.containers.Suite to an ASCII tablature string, complete with headers. A description is optional.

=== `from_Track(track, maxwidth, tuning)` ===

  * *Default values*: maxwidth = 80, tuning = None
  * Converts a mingus.containers.Track object to an ASCII tablature string. `tuning` should be set to a StringTuning object or to None to use the Track's tuning (or alternatively the default if the Track hasn't got its own tuning). `string` and `fret` attributes on Notes are taken into account.

----

[mingusIndex Back to Index]