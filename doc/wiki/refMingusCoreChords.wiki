#summary Reference documentation for `mingus.core.chords`.

----

= mingus.core.chords =



    The chords module is a huge module that builds on the [refMingusCoreIntervals intervals] module. It can be used to generate and recognise a plethora of chords. The following overview groups some of the functions you are most likely to use together.

    == Generate Diatonic Chords ==
    * Triads
        * triad
        * triads
    * Sevenths
        * seventh
        * sevenths

    == Generate Absolute Chords ==
    * Triads
        * minor_triad
        * major_triad
        * diminished_triad
    * Sixths
        * minor_sixth
        * major_sixth
    * Sevenths
        * minor_seventh
        * major_seventh
        * dominant_seventh
        * minor_major_seventh
        * minor_seventh_flat_five
        * diminished_seventh
    * Ninths
        * minor_ninth
        * major_ninth
        * dominant_ninth
    * Elevenths
        * minor_eleventh
        * eleventh
    * Thirteenths
        * minor_thirteenth
        * major_thirteenth
        * dominant_thirteenth
    * Augmented chords
        * augmented_triad
        * augmented_major_seventh
        * augmented_minor_seventh
    * Suspended chords
        * suspended_second_triad
        * suspended_fourth_triad
        * suspended_seventh
        * suspended_fourth_ninth
        * suspended_ninth
    * Altered chords
        * dominant_flat_ninth
        * dominant_sharp_ninth
        * dominant_flat_five
        * sixth_ninth
        * hendrix_chord

    == Get Chords by Function ==

    * Function
        * tonic and tonic7
        * supertonic and supertonic7
        * mediant and mediant7
        * subdominant and subdominant7
        * dominant and dominant7
        * submediant and submediant7
    * Aliases
        * I, II, III, IV, V, VI
        * ii, iii, vi, vii
        * I7, II7, III7, IV7, V7, VI7
        * ii7, iii7, vi7

    == Useful Functions ==

    * determine - Can recognize all the chords that can be generated with from_shorthand (a lot) and their inversions.
    * from_shorthand - Generates chords from shorthand (eg. 'Cmin7')




----

== Attributes ==

=== `chord_shorthand_meaning` ===

  * *Type*: dict
  * *Value*: {'': ' major triad', 'm11': ' minor eleventh', 'add11': ' eleventh', '67': ' dominant sixth', '69': ' sixth ninth', '7b12': ' hendrix chord', 'hendrix': ' hendrix chord', 'aug': ' augmented triad', 'm7': ' minor seventh', 'm6': ' minor sixth', '6': ' major sixth', '5': ' perfect fifth', 'm9': ' minor ninth', 'm7+': ' augmented minor seventh', '6/7': ' dominant sixth', '7#11': ' lydian dominant seventh', '6/9': ' sixth ninth', '11': ' eleventh', 'dim': ' diminished triad', '13': ' dominant thirteenth', '7b5': ' dominant flat five', 'm7b5': ' half diminished seventh', 'susb9': ' suspended fourth ninth', 'mM7': ' minor/major seventh', 'm13': ' minor thirteenth', '7b9': ' dominant flat ninth', 'M13': ' major thirteenth', 'sus47': ' suspended seventh', 'm': ' minor triad', 'sus4b9': ' suspended fourth ninth', 'M7': ' major seventh', 'M6': ' major sixth', 'dim7': ' diminished seventh', 'M7+': ' augmented major seventh', 'M9': ' major ninth', 'add13': ' dominant thirteenth', 'dom7': ' dominant seventh', 'M7+5': ' augmented minor seventh', '+': ' augmented triad', 'sus': ' suspended fourth triad', '7': ' dominant seventh', '9': ' dominant ninth', 'M': ' major triad', '7+': ' augmented major seventh', 'sus2': ' suspended second triad', 'sus4': ' suspended fourth triad', '7#5': ' augmented minor seventh', '7#9': ' dominant sharp ninth', 'm/M7': ' minor/major seventh', 'add9': ' dominant ninth', '7sus4': ' suspended seventh'}

=== `chord_shorthand` ===

  * *Type*: dict
  * *Value*: {'': <function major_triad at 0x8e5a25c>, 'm11': <function minor_eleventh at 0x8e5a764>, 'm13': <function minor_thirteenth at 0x8e5a79c>, '67': <function dominant_sixth at 0x8e5a5a4>, '69': <function sixth_ninth at 0x8e5a5dc>, '7b12': <function hendrix_chord at 0x8e5aa3c>, 'hendrix': <function hendrix_chord at 0x8e5aa3c>, 'aug': <function augmented_triad at 0x8e5a304>, 'm7': <function minor_seventh at 0x8e5a3e4>, 'm6': <function minor_sixth at 0x8e5a534>, '6': <function major_sixth at 0x8e5a56c>, '5': <function <lambda> at 0x8e5d56c>, 'm9': <function minor_ninth at 0x8e5a614>, 'm7+': <function augmented_minor_seventh at 0x8e5a994>, '6/7': <function dominant_sixth at 0x8e5a5a4>, '7#11': <function lydian_dominant_seventh at 0x8e5aa04>, '6/9': <function sixth_ninth at 0x8e5a5dc>, '11': <function eleventh at 0x8e5a72c>, 'dim': <function diminished_triad at 0x8e5a2cc>, '13': <function dominant_thirteenth at 0x8e5a80c>, '7b5': <function dominant_flat_five at 0x8e5a9cc>, 'm7b5': <function minor_seventh_flat_five at 0x8e5a48c>, 'susb9': <function suspended_fourth_ninth at 0x8e5a924>, 'mM7': <function minor_major_seventh at 0x8e5a4fc>, '7b9': <function dominant_flat_ninth at 0x8e5a6bc>, 'M13': <function major_thirteenth at 0x8e5a7d4>, 'sus47': <function suspended_seventh at 0x8e5a8ec>, 'm': <function minor_triad at 0x8e5a294>, 'sus4b9': <function suspended_fourth_ninth at 0x8e5a924>, 'M7': <function major_seventh at 0x8e5a3ac>, 'M6': <function major_sixth at 0x8e5a56c>, 'dim7': <function diminished_seventh at 0x8e5a4c4>, 'M7+': <function augmented_major_seventh at 0x8e5a95c>, 'M9': <function major_ninth at 0x8e5a64c>, 'dom7': <function dominant_seventh at 0x8e5a41c>, 'M7+5': <function augmented_minor_seventh at 0x8e5a994>, '+': <function augmented_triad at 0x8e5a304>, 'sus': <function suspended_triad at 0x8e5a844>, '7': <function dominant_seventh at 0x8e5a41c>, '9': <function dominant_ninth at 0x8e5a684>, 'M': <function major_triad at 0x8e5a25c>, '7+': <function augmented_major_seventh at 0x8e5a95c>, 'sus2': <function suspended_second_triad at 0x8e5a87c>, 'sus4': <function suspended_fourth_triad at 0x8e5a8b4>, '7#5': <function augmented_minor_seventh at 0x8e5a994>, '7#9': <function dominant_sharp_ninth at 0x8e5a6f4>, 'm/M7': <function minor_major_seventh at 0x8e5a4fc>}

----

== Functions ==

=== `I(key)` ===

=== `I7(key)` ===

=== `II(key)` ===

=== `II7(key)` ===

=== `III(key)` ===

=== `III7(key)` ===

=== `IV(key)` ===

=== `IV7(key)` ===

=== `V(key)` ===

=== `V7(key)` ===

=== `VI(key)` ===

=== `VI7(key)` ===

=== `VII(key)` ===

=== `VII7(key)` ===

=== `augmented_major_seventh(note)` ===

  * Builds an augmented major seventh chord on note.
    Example:
{{{
>>> augmented_major_seventh("C")
["C", "E", "G#", "B"]
}}}

=== `augmented_minor_seventh(note)` ===

  * Builds an augmented minor seventh chord on note.
    Example:
{{{
>>> augmented_minor_seventh("C")
["C", "E", "G#", "Bb"]
}}}

=== `augmented_triad(note)` ===

  * Builds an augmented triad on note.
    Example:
{{{
>>> augmented_triad("C")
["C", "E", "G#"]
}}}

=== `determine(chord, shorthand, no_inversions, no_polychords)` ===

  * *Default values*: shorthand = False, no_inversions = False, no_polychords = False
  * Names a chord. Can determine almost every chord, from a simple triad to a fourteen note polychord.

=== `determine_extended_chord5(chord, shorthand, no_inversions, no_polychords)` ===

  * *Default values*: shorthand = False, no_inversions = False, no_polychords = False
  * Determines the names of an extended chord

=== `determine_extended_chord6(chord, shorthand, no_inversions, no_polychords)` ===

  * *Default values*: shorthand = False, no_inversions = False, no_polychords = False
  * Determines the names of an 6 note chord

=== `determine_extended_chord7(chord, shorthand, no_inversions, no_polychords)` ===

  * *Default values*: shorthand = False, no_inversions = False, no_polychords = False
  * Determines the names of an 7 note chord

=== `determine_polychords(chord, shorthand)` ===

  * *Default values*: shorthand = False
  * Determines the polychords in chord. Can handle anything from polychords based on two triads to 6 note extended chords.

=== `determine_seventh(seventh, shorthand, no_inversion, no_polychords)` ===

  * *Default values*: shorthand = False, no_inversion = False, no_polychords = False
  * Determines the type of seventh chord. Returns the results in a lists, ordered on inversions. Expects `seventh` to be a list of 4 notes. If `shorthand` is set to True, results will be returned in chord shorthand ('Cmin7', etc.) - inversions will be dropped in that case.
    Example:
{{{
>>> determine_seventh(['C', 'E', 'G', 'B'])
['C major seventh']
}}}

=== `determine_triad(triad, shorthand, no_inversions, placeholder)` ===

  * *Default values*: shorthand = False, no_inversions = False, placeholder = None
  * Names the triad. Returns answers in a list. The third argument should not be given. If shorthand is True the answers will be in abbreviated form.

Can determine major, minor, diminished and suspended triads. Also knows about invertions.

Examples:
{{{
>>> determine_triad(["A", "C", "E"])
'A minor triad'
>>> determine_triad(["C", "E", "A"])
'A minor triad, first inversion'
>>> determine_triad(["A", "C", "E"], True)
'Am'
}}}

=== `diminished_seventh(note)` ===

  * Builds a diminished seventh chord on note.
    Example:
{{{
>>> diminished_seventh("C")
["C", "Eb", "Gb", "Bbb"]
}}}

=== `diminished_triad(note)` ===

  * Builds a diminished triad on note.
    Example:
{{{
>>> diminished_triad("C")
["C", "Eb", "Gb"]
}}}

=== `dominant(key)` ===

  * Returns the dominant chord in key.
    Example:
{{{
>>> dominant("C")
["G", "B", "D"]
}}}

=== `dominant7(key)` ===

  * Same as dominant(key), but returns seventh chord

=== `dominant_flat_five(note)` ===

  * Builds a dominant flat five chord on note.
    Example:
{{{
>>> dominant_flat_five("C")
['C', 'E', 'Gb', 'Bb']
}}}

=== `dominant_flat_ninth(note)` ===

  * Builds a dominant flat ninth chord on note.
    Example:
{{{
>>> dominant_ninth("C")
['C', 'E', 'G', 'Bb', 'Db']
}}}

=== `dominant_ninth(note)` ===

  * Builds a dominant ninth chord on note.
    Example:
{{{
>>> dominant_ninth("C")
['C', 'E', 'G', 'Bb', 'D']
}}}

=== `dominant_seventh(note)` ===

  * Builds a dominant seventh on note.
    Example:
{{{
>>> dominant_seventh("C")
["C", "E", "G", "Bb"]
}}}

=== `dominant_sharp_ninth(note)` ===

  * Builds a dominant sharp ninth chord on note.
    Example:
{{{
>>> dominant_ninth("C")
['C', 'E', 'G', 'Bb', 'D#']
}}}

=== `dominant_sixth(note)` ===

  * Builds the altered chord 6/7 on note.
    Example:
{{{
>>> dominant_sixth("C")
['C', 'E', 'G', 'A', 'Bb']
}}}

=== `dominant_thirteenth(note)` ===

  * Builds a dominant thirteenth chord on note.
    Example:
{{{
>>> dominant_thirteenth('C')
['C', 'E', 'G', 'Bb', 'D', 'A']
}}}

=== `eleventh(note)` ===

  * Builds an eleventh chord on note.
    Example:
{{{
>>> eleventh("C")
['C', 'G', 'Bb', 'F']
}}}

=== `first_inversion(chord)` ===

  * The first inversion of a chord

=== `from_shorthand(shorthand_string, slash)` ===

  * *Default values*: slash = None
  * Takes a chord written in shorthand and returns the notes in the chord. The function can recognize triads, sevenths, sixths, ninths, elevenths, thirteenths, slashed chords and a number of altered chords. The second argument should not be given and is only used for a recursive call when a slashed chord or polychord is found. See [http://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns Wikibooks] for a nice overview of chord patterns.
    Example:
{{{
>>> from_shorthand("Amin")
["A", "C", "E"]
>>> from_shorthand("Am/M7")
["F", "Ab", "C", "E"]
>>> from_shorthand("A")
["A", "C#", "E"]
>>> from_shorthand("A/G")
["G", "A", "C#", "E"]
>>> from_shorthand("Dm|G")
["G", "B", "D", "F", "A"]

}}}
    Recognised abbreviations: the letters `m` and `M` in the following abbreviations  can always be substituted by respectively `min`, `mi` or `-` and `maj` or `ma` (eg. `from_shorthand("Amin7") == from_shorthand("Am7")`, etc.).
    * Triads: *'m'*, *'M'* or *''*, *'dim'*.
    * Sevenths: *'m7'*, *'M7'*, *'7'*, *'m7b5'*, *'dim7'*, *'m/M7'* or *'mM7'*
    * Augmented chords: *'aug'* or *'+'*, *'7#5'* or *'M7+5'*, *'M7+'*, *'m7+'*, *'7+'*
    * Suspended chords: *'sus4'*, *'sus2'*, *'sus47'* or *'7sus4'*, *'sus'*, *'11'*, *'sus4b9'* or *'susb9'*
    * Sixths: *'6'*, *'m6'*, *'M6'*, *'6/7'* or *'67'*, *6/9* or *69*
    * Ninths: *'9'* or *'add9'*, *'M9'*, *'m9'*, *'7b9'*, *'7#9'*
    * Elevenths: *'11'* or *'add11'*, *'7#11'*, *'m11'*
    * Thirteenths: *'13'* or *'add13'*, *'M13'*, *'m13'*
    * Altered chords: *'7b5'*, *'7b9'*, *'7#9'*, *'67'* or *'6/7'*
    * Special: *'5'*, *'NC'*, *'hendrix'*


=== `half_diminished_seventh(note)` ===

  * Builds a half diminished seventh (=minor seventh flat five) chord on note.
    Example:
{{{
>>> half_diminished_seventh("C")
["C", "Eb", "Gb", "Bb"]
}}}

=== `hendrix_chord(note)` ===

  * Builds the famous Hendrix chord (7b12)
    Example:
{{{
>>> hendrix_chord('C')
['C', 'E', 'G', 'Bb', 'Eb']
}}}

=== `ii(key)` ===

=== `ii7(key)` ===

=== `iii(key)` ===

=== `iii7(key)` ===

=== `int_desc(tries)` ===

  * Helper function that returns the inversion of the triad in a string

=== `invert(chord)` ===

  * Inverts a given chord one time

=== `lydian_dominant_seventh(note)` ===

  * Builds the lydian dominant seventh (7#11) on note
    Example:
{{{
>>> lydian_dominant_seventh('C')
['C', 'E', 'G', 'Bb', 'F#']

}}}

=== `major_ninth(note)` ===

  * Builds a major ninth chord on note.
    Example:
{{{
>>> major_ninth("C")
['C', 'E', 'G', 'B', 'D']
}}}

=== `major_seventh(note)` ===

  * Builds a major seventh on note.
    Example:
{{{
>>> major_seventh("C")
["C", "E", "G", "B"]
}}}

=== `major_sixth(note)` ===

  * Builds a major sixth chord on note.
    Example:
{{{
>>> major_sixth("C")
['C', 'E', 'G', 'A']
}}}

=== `major_thirteenth(note)` ===

  * Builds a major thirteenth chord on note.
    Example:
{{{
>>> major_thirteenth('C')
['C', 'E', 'G', 'B', 'D', 'A']
}}}

=== `major_triad(note)` ===

  * Builds a major triad on note.
    Example:
{{{
>>> major_triad("C")
["C", "E", "G"]
}}}

=== `mediant(key)` ===

  * Returns the mediant chord in key.
    Example:
{{{
>>> mediant("C")
["E", "G", "B"]
}}}

=== `mediant7(key)` ===

  * Same as mediant(key), but returns seventh chord

=== `minor_eleventh(note)` ===

  * Builds a minor eleventh chord on note.
    Example:
{{{
>>> minor_eleventh("C")
['C', 'Eb', 'G', 'Bb', 'F']
}}}

=== `minor_major_seventh(note)` ===

  * Builds a minor major seventh chord on note.
    Example:
{{{
>>> minor_major_seventh("C")
["C", "Eb", "G", "B"]
}}}

=== `minor_ninth(note)` ===

  * Builds a minor ninth chord on note.
    Example:
{{{
>>> minor_ninth("C")
['C', 'Eb', 'G', 'Bb', 'D']
}}}

=== `minor_seventh(note)` ===

  * Builds a minor seventh on note.
    Example:
{{{
>>> minor_seventh("C")
["C", "Eb", "G", "Bb"]
}}}

=== `minor_seventh_flat_five(note)` ===

  * See half_diminished_seventh(note) for docs

=== `minor_sixth(note)` ===

  * Builds a minor sixth chord on note.
    Example:
{{{
>>> minor_sixth("C")
['C', 'Eb', 'G', 'A']
}}}

=== `minor_thirteenth(note)` ===

  * Builds a minor thirteenth chord on note.
    Example:
{{{
>>> minor_thirteenth('C')
['C', 'Eb', 'G', 'Bb', 'D', 'A']
}}}

=== `minor_triad(note)` ===

  * Builds a minor triad on note.
    Example:
{{{
>>> minor_triad("C")
["C", "Eb", "G"]
}}}

=== `second_inversion(chord)` ===

  * Returns the second inversion of chord

=== `seventh(note, key)` ===

  * Returns the seventh chord on note in key.
    Example:
{{{
>>> seventh("C", "C")
["C", "E", "G", "B"]
}}}

=== `sevenths(key)` ===

  * Returns all the sevenths chords in key in a list

=== `sixth_ninth(note)` ===

  * Builds the sixth/ninth chord on note.
    Example:
{{{
>>> sixth_ninth('C')
['C', 'E', 'G', 'A', 'D']
}}}

=== `subdominant(key)` ===

  * Returns the subdominant chord in key.
    Example:
{{{
>>> subdominant("C")
["F", "A", "C"]
}}}

=== `subdominant7(key)` ===

  * Same as subdominant(key), but returns seventh chord

=== `submediant(key)` ===

  * Returns the submediant chord in key.
    Example:
{{{
>>> submediant("C")
["A", "C", "E"]
}}}

=== `submediant7(key)` ===

  * Same as submediant(key), but returns seventh chord

=== `subtonic(key)` ===

  * Returns the subtonic in key.
    Example:
{{{
>>> subtonic("C")
['B', 'D', 'F']
}}}

=== `subtonic7(key)` ===

  * Same as subtonic(key), but returns seventh chord

=== `supertonic(key)` ===

  * Returns the supertonic chord in key.
    Example:
{{{
>>> supertonic("C")
["D", "F", "A"]
}}}

=== `supertonic7(key)` ===

  * Same as supertonic(key), but returns seventh chord

=== `suspended_fourth_ninth(note)` ===

  * Builds a suspended fourth flat ninth chord on note.
    Example:
{{{
>>> suspended_ninth("C")
['C', 'F', 'G', 'Db']
}}}

=== `suspended_fourth_triad(note)` ===

  * Builds a suspended fourth triad on note.
    Example:
{{{
>>> suspended_fourth_triad("C")
["C", "F", "G"]
}}}

=== `suspended_second_triad(note)` ===

  * Builds a suspended second triad on note.
    Example:
{{{
>>> suspended_second_triad("C")
["C", "D", "G"]
}}}

=== `suspended_seventh(note)` ===

  * Builds a suspended (flat) seventh chord on note.
    Example:
{{{
>>> suspended_seventh("C")
["C", "F", "G", "Bb"]

}}}

=== `suspended_triad(note)` ===

  * An alias for suspended_fourth_triad

=== `third_inversion(chord)` ===

  * Returns the third inversion of chord

=== `tonic(key)` ===

  * Returns the tonic chord in key.
    Example:
{{{
>>> tonic("C")
["C", "E", "G"]
}}}

=== `tonic7(key)` ===

  * Same as tonic(key), but returns seventh chord instead

=== `triad(note, key)` ===

  * Returns the triad on note in key as a list.
    Example:
{{{
>>> triad("E", "C")
["E", "G", "B"]
>>> triad("E", "B")
["E", "G#", "B"]
}}}

=== `triads(key)` ===

  * Returns all the triads in key. Implemented using a cache.

=== `vi(key)` ===

=== `vi7(key)` ===

=== `vii(key)` ===

=== `vii7(key)` ===

----

[mingusIndex Back to Index]