#summary Reference documentation for `mingus.containers.Note`.

----

= mingus.containers.Note =

In the mingus.core module, notes are generally represented by strings. Most of the times, this is not enough. We want to set the octave and maybe the amplitude, vibrato or other dynamics. Then we want to store the notes in bars, the bars in tracks, the tracks in compositions, etc.

We could do this with a number of lists, but ultimately it is a lot easier to use objects. The Note class provides an easy way to deal with notes in an object oriented matter.

You can use the class [refMingusContainersNotecontainer NoteContainer] to group Notes together in intervals and chords.

----

== Attributes ==

=== `dynamics` ===

  * *Type*: dict
  * *Value*: {}

=== `name` ===

  * *Type*: str
  * *Value*: 'C'

=== `octave` ===

  * *Type*: int
  * *Value*: 4

----

== Functions ==

=== `__cmp__(self, other)` ===

  * This method allows you to use the comparing operators on Notes (>, <, ==, !=, >= and <=). So we can sort() Intervals, etc.
{{{
>>> Note("C", 4) < Note("B", 4) 
True
>>> Note("C", 4) > Note("B", 4)
False
}}}

=== `__init__(self, name, octave, dynamics)` ===

  * *Default values*: name = 'C', octave = 4, dynamics = {}
=== `__int__(self)` ===

  * Returns the current octave multiplied by twelve and adds notes.note_to_int to it. This means a C-0 returns 0, C-1 returns 12, etc. This method allows you to use int() on Notes.

=== `__repr__(self)` ===

  * A helpful representation for printing Note classes

=== `augment(self)` ===

  * Calls notes.augment with this note as argument

=== `change_octave(self, diff)` ===

  * Changes the octave of the note to the current `octave` + `diff`

=== `diminish(self)` ===

  * Calls notes.diminish with this note as argument

=== `empty(self)` ===

  * Removes the data in the instance.

=== `from_hertz(self, hertz, standard_pitch)` ===

  * *Default values*: standard_pitch = 440
  * Sets the Note name and pitch, calculated from the `hertz` value. The `standard_pitch` argument can be used to set the pitch of A-4, from which the rest is calculated.

=== `from_int(self, integer)` ===

  * Sets the Note corresponding to the integer. 0 is a C on octave 0, 12 is a C on octave 1, etc. 
{{{
>>> c = Note()
>>> c.from_int(12)
>>> c
'C-1'
}}}

=== `from_shorthand(self, shorthand)` ===

  * Convert from traditional Helmhotz pitch notation.{{{
>>> Note().from_shorthand("C,,")
'C-0'
>>> Note().from_shorthand("C")
'C-2'
>>> Note().from_shorthand("c'")
'C-4'
}}}

=== `measure(self, other)` ===

  * Returns the number of semitones between this Note and the other.
{{{
>>> Note("C").measure(Note("D"))
2
>>> Note("D").measure(Note("C"))
-2
}}}

=== `octave_down(self)` ===

  * Decrements the current octave with 1

=== `octave_up(self)` ===

  * Increments the current octave with 1

=== `remove_redundant_accidentals(self)` ===

  * Calls notes.remove_redundant_accidentals on this note's name.

=== `set_note(self, name, octave, dynamics)` ===

  * *Default values*: name = 'C', octave = 4, dynamics = {}
  * Sets the note to `name` in `octave` with `dynamics` if the name of the note is valid. Returns the objects if it succeeded, raises an NoteFormatError otherwise.

=== `to_hertz(self, standard_pitch)` ===

  * *Default values*: standard_pitch = 440
  * Returns the Note in Hz. The `standard_pitch` argument can be used to set the pitch of A-4, from which the rest is calculated.

=== `to_major(self)` ===

  * Calls notes.to_major with this note name as argument. Doesn't change the octave.

=== `to_minor(self)` ===

  * Calls notes.to_minor with this note as argument. Doesn't change the octave.

=== `to_shorthand(self)` ===

  * Gives the traditional Helmhotz pitch notation.{{{
>>> Note("C-4").to_shorthand()
"c'"
>>> Note("C-3").to_shorthand()
'c'
>>> Note("C-2").to_shorthand()
'C'
>>> Note("C-1").to_shorthand()
'C,'
}}}

=== `transpose(self, interval, up)` ===

  * *Default values*: up = True
  * Transposes the note up or down the interval. 
{{{
>>> a = Note("A")
>>> a.transpose("3")
>>> a
'C#-5'
>>> a.transpose("3", False)
>>> a
'A-4'
}}}

----

[mingusIndex Back to Index]